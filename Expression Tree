#include <iostream>
#include <stack>
using namespace std;
struct node
{
    char data;
    node *left, *right;
};
class ExTree
{
public:
    node *root = NULL;
    stack<node *> s1;
    char exp[11];
    int n;
    void creation()
    {
        cout << "Enter the size of the expression tree: ";
        cin >> n;
        cout << "Enter the prefix expression: ";
        cin >> exp;
        for (int i = 10; i >= 0; i--)
        {
            char ch = exp[i];
            node *nnode = new node;
            nnode->left = nnode->right = NULL;
            nnode->data = ch;
            if (ch >= 97 && ch <= 123)
            {
                s1.push(nnode);
            }
            else
            {
                nnode->left = s1.top();
                s1.pop();
                nnode->right = s1.top();
                s1.pop();
                s1.push(nnode);
            }
        }
        root = s1.top();
        s1.pop();
        postorder(root);
    }
    void postorder(node *root)
    {
        if (!root)
            return;
        stack<node *> s1, s2;
        s1.push(root);
        while (!s1.empty())
        {
            node *curr = s1.top();
            s1.pop();
            s2.push(curr);
            if (curr->left)
                s1.push(curr->left);
            if (curr->right)
                s1.push(curr->right);
        }
        while (!s2.empty())
        {
            cout << s2.top()->data << " ";
            s2.pop();
        }
    }
    void deleteTree(node *root)
    {
        if (!root)
            return;
        deleteTree(root->left);
        deleteTree(root->right);
        delete root;
    }
    void deleteTree()
    {
        deleteTree(root);
        root = NULL;
        cout << "\nTree deleted successfully." << endl;
    }
};
int main()
{
    ExTree tree;
    tree.creation();

    tree.deleteTree();
    return 0;
}
